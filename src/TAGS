
main.c,220
typedef struct foo{foo6,80
  char *name;name7,100
} foo_t;8,124
void list_destructor(10,134
void foo_destructor(19,229
foo_t *new_foo(new_foo25,309
void test_foo(33,455
void test_array(40,550
int main(49,690

refmem.c,1011
#define OBJECT_TO_RECORD(17,408
#define RECORD_TO_OBJECT(24,669
#define IS_ONLY_ALLOCATION(31,893
#define CASCADE_LIMIT 37,1064
typedef struct object_record object_record_t;44,1208
static size_t cascade_limit 51,1371
static object_record_t *last_allocation last_allocation52,1465
static bool outstanding_frees 53,1556
struct object_record69,1953
  function1_t destroy;71,1976
  object_record_t *previous;previous72,2067
  object_record_t *next;next73,2158
  rc_format arr_len;74,2249
  rc_format ref_count;75,2340
  rc_format gratis1;76,2431
  rc_format gratis2;77,2452
void retain(93,2827
void release(108,3188
rc_format rc(135,3730
void no_destructor(149,4149
void set_heap_pointers(159,4348
obj allocate(183,5178
obj allocate_array(216,6445
char *strdup2(strdup2235,7044
void redirect_heap_pointers(258,7423
bool is_heap_object(284,8167
void deallocate(307,8734
void set_cascade_limit(328,9210
size_t get_cascade_limit(338,9377
void cleanup(346,9516
void shutdown(366,9907
